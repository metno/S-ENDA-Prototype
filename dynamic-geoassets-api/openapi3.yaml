openapi: "3.0.2"
info: 
  title: "Dynamic geo assets API"
  description: "Register, edit and validate metadata about geodynamic datasets and services."
  version: "0.1"
paths:
  /api/v1/about:
    get:
      summary: "Metadata about this service."
      operationId: about
      tags:
        - meta
      responses:
        '200':
          description: Metadata about this service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aboutOK'
  /api/v1/healthz:
    get:
      summary: "Health status of this service."
      operationId: healthz
      tags:
        - meta
      responses:
        '200':
          description: The service is ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthz'
        '503':
          description: The service is up, but something is seriously wrong and healthz will give you the status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthz'
        '500':
          description: The whole service is failing, and healthz is not able to give you a meaningful status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceFailing'
  /api/v1/dataset:
    get:
      summary: "List metadata records for all existing datasets."
      operationId: datasetGetAll
      tags:
        - dataset
      responses:
        '200':
          description: Metadata listing went ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadataOK'
        '503':
          description: The service can not properly handle the request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceFailing'
    post:
      summary: "Add new metadatata dataset record."
      operationId: datasetPost
      tags:
        - dataset
      requestBody:
        description: Dataset to be stored.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadataMMD'
      responses:
        '200':
          description: Metadata listing went ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadataOK'
        '503':
          description: The service can not properly handle the request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceFailing'
  /api/v1/dataset/{id}:
    get:
      summary: "Get metadata about specified dataset."
      operationId: datasetGet
      tags:
        - dataset
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Globally unique id defining this dataset.
      responses:
        '200':
          description: Metadata listing went ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadataOK'
        '503':
          description: The service can not properly handle the request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceFailing'
  /api/v1/service:
    get:
      summary: "List metadata records for all existing services."
      operationId: serviceGetAll
      tags:
        - service
      responses:
        '200':
          description: Metadata listing went ok.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadataOK'
        '503':
          description: The service can not properly handle the request at this time.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceFailing'
components:
  schemas:
    healthz:
      title: Service health report.
      type: object
      required:
      - status
      properties:
        status:
          type: string
          example: "healthy"
          enum:
          - healthy
          - unhealthy
          - critical
        description:
          type: string
          example: "Service is good to go."
        errors:
          type: array
          items:
            type: string
    serviceFailing:
      title: Error message.
      type: object
      properties:
        error:
          type: string
          example: "Critial service error. Please try again later."
    metadataListOK:
      title: Metadata listing.
      type: array
      items:
        $ref: '#/components/schemas/metadataMMD'
    metadataOK:
      title: Metadata record.
      $ref: '#/components/schemas/metadataMMD'
    metadataMMD:
      type: object
      properties:
        product_name:
          type: string
          example: "Arome Arctic Full Control"
        bounding_box:
          type: array
          example: [120,79,-10,90]
          items:
            type: number
          minItems: 4
          maxItems: 4
        keywords:
          type: array
          example: ["Wind", "Pressure"]
          items:
            type: string
    aboutOK:    
      type: object
      properties:
        name: 
          type: string
        description: 
          type: string
        termsOfService: 
          type: string
        provider:
          type: object
          properties:
            "@type":
              type: string
            name:
              type: string
